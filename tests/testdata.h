/* testdata.h
 *
 * Copyright (C) 2006-2023 wolfSSL Inc.
 *
 * This file is part of wolfPKCS11.
 *
 * wolfPKCS11 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * wolfPKCS11 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
 */

/* DLL Location and slot */
#ifndef WOLFPKCS11_DLL_FILENAME
    #ifdef __MACH__
    #define WOLFPKCS11_DLL_FILENAME "./src/.libs/libwolfpkcs11.dylib"
    #else
    #define WOLFPKCS11_DLL_FILENAME "./src/.libs/libwolfpkcs11.so"
    #endif
#endif
#ifndef WOLFPKCS11_DLL_SLOT
    #define WOLFPKCS11_DLL_SLOT 1
#endif


#ifndef NO_RSA
static unsigned char rsa_2048_modulus[] = {
    0xC3, 0x03, 0xD1, 0x2B, 0xFE, 0x39, 0xA4, 0x32,
    0x45, 0x3B, 0x53, 0xC8, 0x84, 0x2B, 0x2A, 0x7C,
    0x74, 0x9A, 0xBD, 0xAA, 0x2A, 0x52, 0x07, 0x47,
    0xD6, 0xA6, 0x36, 0xB2, 0x07, 0x32, 0x8E, 0xD0,
    0xBA, 0x69, 0x7B, 0xC6, 0xC3, 0x44, 0x9E, 0xD4,
    0x81, 0x48, 0xFD, 0x2D, 0x68, 0xA2, 0x8B, 0x67,
    0xBB, 0xA1, 0x75, 0xC8, 0x36, 0x2C, 0x4A, 0xD2,
    0x1B, 0xF7, 0x8B, 0xBA, 0xCF, 0x0D, 0xF9, 0xEF,
    0xEC, 0xF1, 0x81, 0x1E, 0x7B, 0x9B, 0x03, 0x47,
    0x9A, 0xBF, 0x65, 0xCC, 0x7F, 0x65, 0x24, 0x69,
    0xA6, 0xE8, 0x14, 0x89, 0x5B, 0xE4, 0x34, 0xF7,
    0xC5, 0xB0, 0x14, 0x93, 0xF5, 0x67, 0x7B, 0x3A,
    0x7A, 0x78, 0xE1, 0x01, 0x56, 0x56, 0x91, 0xA6,
    0x13, 0x42, 0x8D, 0xD2, 0x3C, 0x40, 0x9C, 0x4C,
    0xEF, 0xD1, 0x86, 0xDF, 0x37, 0x51, 0x1B, 0x0C,
    0xA1, 0x3B, 0xF5, 0xF1, 0xA3, 0x4A, 0x35, 0xE4,
    0xE1, 0xCE, 0x96, 0xDF, 0x1B, 0x7E, 0xBF, 0x4E,
    0x97, 0xD0, 0x10, 0xE8, 0xA8, 0x08, 0x30, 0x81,
    0xAF, 0x20, 0x0B, 0x43, 0x14, 0xC5, 0x74, 0x67,
    0xB4, 0x32, 0x82, 0x6F, 0x8D, 0x86, 0xC2, 0x88,
    0x40, 0x99, 0x36, 0x83, 0xBA, 0x1E, 0x40, 0x72,
    0x22, 0x17, 0xD7, 0x52, 0x65, 0x24, 0x73, 0xB0,
    0xCE, 0xEF, 0x19, 0xCD, 0xAE, 0xFF, 0x78, 0x6C,
    0x7B, 0xC0, 0x12, 0x03, 0xD4, 0x4E, 0x72, 0x0D,
    0x50, 0x6D, 0x3B, 0xA3, 0x3B, 0xA3, 0x99, 0x5E,
    0x9D, 0xC8, 0xD9, 0x0C, 0x85, 0xB3, 0xD9, 0x8A,
    0xD9, 0x54, 0x26, 0xDB, 0x6D, 0xFA, 0xAC, 0xBB,
    0xFF, 0x25, 0x4C, 0xC4, 0xD1, 0x79, 0xF4, 0x71,
    0xD3, 0x86, 0x40, 0x18, 0x13, 0xB0, 0x63, 0xB5,
    0x72, 0x4E, 0x30, 0xC4, 0x97, 0x84, 0x86, 0x2D,
    0x56, 0x2F, 0xD7, 0x15, 0xF7, 0x7F, 0xC0, 0xAE,
    0xF5, 0xFC, 0x5B, 0xE5, 0xFB, 0xA1, 0xBA, 0xD3
};

static unsigned char rsa_2048_pub_exp[] = {
    0x01, 0x00, 0x01
};

static unsigned char rsa_2048_priv_exp[] = {
    0xA2, 0xE6, 0xD8, 0x5F, 0x10, 0x71, 0x64, 0x08,
    0x9E, 0x2E, 0x6D, 0xD1, 0x6D, 0x1E, 0x85, 0xD2,
    0x0A, 0xB1, 0x8C, 0x47, 0xCE, 0x2C, 0x51, 0x6A,
    0xA0, 0x12, 0x9E, 0x53, 0xDE, 0x91, 0x4C, 0x1D,
    0x6D, 0xEA, 0x59, 0x7B, 0xF2, 0x77, 0xAA, 0xD9,
    0xC6, 0xD9, 0x8A, 0xAB, 0xD8, 0xE1, 0x16, 0xE4,
    0x63, 0x26, 0xFF, 0xB5, 0x6C, 0x13, 0x59, 0xB8,
    0xE3, 0xA5, 0xC8, 0x72, 0x17, 0x2E, 0x0C, 0x9F,
    0x6F, 0xE5, 0x59, 0x3F, 0x76, 0x6F, 0x49, 0xB1,
    0x11, 0xC2, 0x5A, 0x2E, 0x16, 0x29, 0x0D, 0xDE,
    0xB7, 0x8E, 0xDC, 0x40, 0xD5, 0xA2, 0xEE, 0xE0,
    0x1E, 0xA1, 0xF4, 0xBE, 0x97, 0xDB, 0x86, 0x63,
    0x96, 0x14, 0xCD, 0x98, 0x09, 0x60, 0x2D, 0x30,
    0x76, 0x9C, 0x3C, 0xCD, 0xE6, 0x88, 0xEE, 0x47,
    0x92, 0x79, 0x0B, 0x5A, 0x00, 0xE2, 0x5E, 0x5F,
    0x11, 0x7C, 0x7D, 0xF9, 0x08, 0xB7, 0x20, 0x06,
    0x89, 0x2A, 0x5D, 0xFD, 0x00, 0xAB, 0x22, 0xE1,
    0xF0, 0xB3, 0xBC, 0x24, 0xA9, 0x5E, 0x26, 0x0E,
    0x1F, 0x00, 0x2D, 0xFE, 0x21, 0x9A, 0x53, 0x5B,
    0x6D, 0xD3, 0x2B, 0xAB, 0x94, 0x82, 0x68, 0x43,
    0x36, 0xD8, 0xF6, 0x2F, 0xC6, 0x22, 0xFC, 0xB5,
    0x41, 0x5D, 0x0D, 0x33, 0x60, 0xEA, 0xA4, 0x7D,
    0x7E, 0xE8, 0x4B, 0x55, 0x91, 0x56, 0xD3, 0x5C,
    0x57, 0x8F, 0x1F, 0x94, 0x17, 0x2F, 0xAA, 0xDE,
    0xE9, 0x9E, 0xA8, 0xF4, 0xCF, 0x8A, 0x4C, 0x8E,
    0xA0, 0xE4, 0x56, 0x73, 0xB2, 0xCF, 0x4F, 0x86,
    0xC5, 0x69, 0x3C, 0xF3, 0x24, 0x20, 0x8B, 0x5C,
    0x96, 0x0C, 0xFA, 0x6B, 0x12, 0x3B, 0x9A, 0x67,
    0xC1, 0xDF, 0xC6, 0x96, 0xB2, 0xA5, 0xD5, 0x92,
    0x0D, 0x9B, 0x09, 0x42, 0x68, 0x24, 0x10, 0x45,
    0xD4, 0x50, 0xE4, 0x17, 0x39, 0x48, 0xD0, 0x35,
    0x8B, 0x94, 0x6D, 0x11, 0xDE, 0x8F, 0xCA, 0x59,
};

static unsigned char rsa_2048_p[] = {
    0xEA, 0x24, 0xA7, 0xF9, 0x69, 0x33, 0xE9, 0x71,
    0xDC, 0x52, 0x7D, 0x88, 0x21, 0x28, 0x2F, 0x49,
    0xDE, 0xBA, 0x72, 0x16, 0xE9, 0xCC, 0x47, 0x7A,
    0x88, 0x0D, 0x94, 0x57, 0x84, 0x58, 0x16, 0x3A,
    0x81, 0xB0, 0x3F, 0xA2, 0xCF, 0xA6, 0x6C, 0x1E,
    0xB0, 0x06, 0x29, 0x00, 0x8F, 0xE7, 0x77, 0x76,
    0xAC, 0xDB, 0xCA, 0xC7, 0xD9, 0x5E, 0x9B, 0x3F,
    0x26, 0x90, 0x52, 0xAE, 0xFC, 0x38, 0x90, 0x00,
    0x14, 0xBB, 0xB4, 0x0F, 0x58, 0x94, 0xE7, 0x2F,
    0x6A, 0x7E, 0x1C, 0x4F, 0x41, 0x21, 0xD4, 0x31,
    0x59, 0x1F, 0x4E, 0x8A, 0x1A, 0x8D, 0xA7, 0x57,
    0x6C, 0x22, 0xD8, 0xE5, 0xF4, 0x7E, 0x32, 0xA6,
    0x10, 0xCB, 0x64, 0xA5, 0x55, 0x03, 0x87, 0xA6,
    0x27, 0x05, 0x8C, 0xC3, 0xD7, 0xB6, 0x27, 0xB2,
    0x4D, 0xBA, 0x30, 0xDA, 0x47, 0x8F, 0x54, 0xD3,
    0x3D, 0x8B, 0x84, 0x8D, 0x94, 0x98, 0x58, 0xA5,
};

static unsigned char rsa_2048_q[] = {
    0xD5, 0x38, 0x1B, 0xC3, 0x8F, 0xC5, 0x93, 0x0C,
    0x47, 0x0B, 0x6F, 0x35, 0x92, 0xC5, 0xB0, 0x8D,
    0x46, 0xC8, 0x92, 0x18, 0x8F, 0xF5, 0x80, 0x0A,
    0xF7, 0xEF, 0xA1, 0xFE, 0x80, 0xB9, 0xB5, 0x2A,
    0xBA, 0xCA, 0x18, 0xB0, 0x5D, 0xA5, 0x07, 0xD0,
    0x93, 0x8D, 0xD8, 0x9C, 0x04, 0x1C, 0xD4, 0x62,
    0x8E, 0xA6, 0x26, 0x81, 0x01, 0xFF, 0xCE, 0x8A,
    0x2A, 0x63, 0x34, 0x35, 0x40, 0xAA, 0x6D, 0x80,
    0xDE, 0x89, 0x23, 0x6A, 0x57, 0x4D, 0x9E, 0x6E,
    0xAD, 0x93, 0x4E, 0x56, 0x90, 0x0B, 0x6D, 0x9D,
    0x73, 0x8B, 0x0C, 0xAE, 0x27, 0x3D, 0xDE, 0x4E,
    0xF0, 0xAA, 0xC5, 0x6C, 0x78, 0x67, 0x6C, 0x94,
    0x52, 0x9C, 0x37, 0x67, 0x6C, 0x2D, 0xEF, 0xBB,
    0xAF, 0xDF, 0xA6, 0x90, 0x3C, 0xC4, 0x47, 0xCF,
    0x8D, 0x96, 0x9E, 0x98, 0xA9, 0xB4, 0x9F, 0xC5,
    0xA6, 0x50, 0xDC, 0xB3, 0xF0, 0xFB, 0x74, 0x17,
};

static unsigned char rsa_2048_dP[] = {
    0x5E, 0x83, 0x09, 0x62, 0xBD, 0xBA, 0x7C, 0xA2,
    0xBF, 0x42, 0x74, 0xF5, 0x7C, 0x1C, 0xD2, 0x69,
    0xC9, 0x04, 0x0D, 0x85, 0x7E, 0x3E, 0x3D, 0x24,
    0x12, 0xC3, 0x18, 0x7B, 0xF3, 0x29, 0xF3, 0x5F,
    0x0E, 0x76, 0x6C, 0x59, 0x75, 0xE4, 0x41, 0x84,
    0x69, 0x9D, 0x32, 0xF3, 0xCD, 0x22, 0xAB, 0xB0,
    0x35, 0xBA, 0x4A, 0xB2, 0x3C, 0xE5, 0xD9, 0x58,
    0xB6, 0x62, 0x4F, 0x5D, 0xDE, 0xE5, 0x9E, 0x0A,
    0xCA, 0x53, 0xB2, 0x2C, 0xF7, 0x9E, 0xB3, 0x6B,
    0x0A, 0x5B, 0x79, 0x65, 0xEC, 0x6E, 0x91, 0x4E,
    0x92, 0x20, 0xF6, 0xFC, 0xFC, 0x16, 0xED, 0xD3,
    0x76, 0x0C, 0xE2, 0xEC, 0x7F, 0xB2, 0x69, 0x13,
    0x6B, 0x78, 0x0E, 0x5A, 0x46, 0x64, 0xB4, 0x5E,
    0xB7, 0x25, 0xA0, 0x5A, 0x75, 0x3A, 0x4B, 0xEF,
    0xC7, 0x3C, 0x3E, 0xF7, 0xFD, 0x26, 0xB8, 0x20,
    0xC4, 0x99, 0x0A, 0x9A, 0x73, 0xBE, 0xC3, 0x19,
};

static unsigned char rsa_2048_dQ[] = {
    0xBA, 0x44, 0x93, 0x14, 0xAC, 0x34, 0x19, 0x3B,
    0x5F, 0x91, 0x60, 0xAC, 0xF7, 0xB4, 0xD6, 0x81,
    0x05, 0x36, 0x51, 0x53, 0x3D, 0xE8, 0x65, 0xDC,
    0xAF, 0x2E, 0xDC, 0x61, 0x3E, 0xC9, 0x7D, 0xB8,
    0x7F, 0x87, 0xF0, 0x3B, 0x9B, 0x03, 0x82, 0x29,
    0x37, 0xCE, 0x72, 0x4E, 0x11, 0xD5, 0xB1, 0xC1,
    0x0C, 0x07, 0xA0, 0x99, 0x91, 0x4A, 0x8D, 0x7F,
    0xEC, 0x79, 0xCF, 0xF1, 0x39, 0xB5, 0xE9, 0x85,
    0xEC, 0x62, 0xF7, 0xDA, 0x7D, 0xBC, 0x64, 0x4D,
    0x22, 0x3C, 0x0E, 0xF2, 0xD6, 0x51, 0xF5, 0x87,
    0xD8, 0x99, 0xC0, 0x11, 0x20, 0x5D, 0x0F, 0x29,
    0xFD, 0x5B, 0xE2, 0xAE, 0xD9, 0x1C, 0xD9, 0x21,
    0x56, 0x6D, 0xFC, 0x84, 0xD0, 0x5F, 0xED, 0x10,
    0x15, 0x1C, 0x18, 0x21, 0xE7, 0xC4, 0x3D, 0x4B,
    0xD7, 0xD0, 0x9E, 0x6A, 0x95, 0xCF, 0x22, 0xC9,
    0x03, 0x7B, 0x9E, 0xE3, 0x60, 0x01, 0xFC, 0x2F,
};

static unsigned char rsa_2048_u[] = {
    0x11, 0xD0, 0x4B, 0xCF, 0x1B, 0x67, 0xB9, 0x9F,
    0x10, 0x75, 0x47, 0x86, 0x65, 0xAE, 0x31, 0xC2,
    0xC6, 0x30, 0xAC, 0x59, 0x06, 0x50, 0xD9, 0x0F,
    0xB5, 0x70, 0x06, 0xF7, 0xF0, 0xD3, 0xC8, 0x62,
    0x7C, 0xA8, 0xDA, 0x6E, 0xF6, 0x21, 0x3F, 0xD3,
    0x7F, 0x5F, 0xEA, 0x8A, 0xAB, 0x3F, 0xD9, 0x2A,
    0x5E, 0xF3, 0x51, 0xD2, 0xC2, 0x30, 0x37, 0xE3,
    0x2D, 0xA3, 0x75, 0x0D, 0x1E, 0x4D, 0x21, 0x34,
    0xD5, 0x57, 0x70, 0x5C, 0x89, 0xBF, 0x72, 0xEC,
    0x4A, 0x6E, 0x68, 0xD5, 0xCD, 0x18, 0x74, 0x33,
    0x4E, 0x8C, 0x3A, 0x45, 0x8F, 0xE6, 0x96, 0x40,
    0xEB, 0x63, 0xF9, 0x19, 0x86, 0x3A, 0x51, 0xDD,
    0x89, 0x4B, 0xB0, 0xF3, 0xF9, 0x9F, 0x5D, 0x28,
    0x95, 0x38, 0xBE, 0x35, 0xAB, 0xCA, 0x5C, 0xE7,
    0x93, 0x53, 0x34, 0xA1, 0x45, 0x5D, 0x13, 0x39,
    0x65, 0x42, 0x46, 0xA1, 0x9F, 0xCD, 0xF5, 0xBF
};

#endif

#ifdef HAVE_ECC
static unsigned char ecc_p256_params[] = {
    0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07
};

/* ./certs/ecc-client-key.der, ECC */
static unsigned char ecc_p256_priv[] = {
    0xF8, 0xCF, 0x92, 0x6B, 0xBD, 0x1E, 0x28, 0xF1,
    0xA8, 0xAB, 0xA1, 0x23, 0x4F, 0x32, 0x74, 0x18,
    0x88, 0x50, 0xAD, 0x7E, 0xC7, 0xEC, 0x92, 0xF8,
    0x8F, 0x97, 0x4D, 0xAF, 0x56, 0x89, 0x65, 0xC7
};

static unsigned char ecc_p256_pub[] = {
    0x04, 0x41, 0x04, 0x55, 0xBF, 0xF4, 0x0F, 0x44,
    0x50, 0x9A, 0x3D, 0xCE, 0x9B, 0xB7, 0xF0, 0xC5,
    0x4D, 0xF5, 0x70, 0x7B, 0xD4, 0xEC, 0x24, 0x8E,
    0x19, 0x80, 0xEC, 0x5A, 0x4C, 0xA2, 0x24, 0x03,
    0x62, 0x2C, 0x9B, 0xDA, 0xEF, 0xA2, 0x35, 0x12,
    0x43, 0x84, 0x76, 0x16, 0xC6, 0x56, 0x95, 0x06,
    0xCC, 0x01, 0xA9, 0xBD, 0xF6, 0x75, 0x1A, 0x42,
    0xF7, 0xBD, 0xA9, 0xB2, 0x36, 0x22, 0x5F, 0xC7,
    0x5D, 0x7F, 0xB4
};

static unsigned char ecc_p256_point[] = {
    0x04,
    0x55, 0xBF, 0xF4, 0x0F, 0x44, 0x50, 0x9A, 0x3D,
    0xCE, 0x9B, 0xB7, 0xF0, 0xC5, 0x4D, 0xF5, 0x70,
    0x7B, 0xD4, 0xEC, 0x24, 0x8E, 0x19, 0x80, 0xEC,
    0x5A, 0x4C, 0xA2, 0x24, 0x03, 0x62, 0x2C, 0x9B,
    0xDA, 0xEF, 0xA2, 0x35, 0x12, 0x43, 0x84, 0x76,
    0x16, 0xC6, 0x56, 0x95, 0x06, 0xCC, 0x01, 0xA9,
    0xBD, 0xF6, 0x75, 0x1A, 0x42, 0xF7, 0xBD, 0xA9,
    0xB2, 0x36, 0x22, 0x5F, 0xC7, 0x5D, 0x7F, 0xB4
};

static const unsigned char ecc_secret_256[] =
{
    0xcc, 0xfb, 0x45, 0xaf, 0xc3, 0x9c, 0xd7, 0x9e,
    0x1f, 0xd1, 0xc7, 0xb8, 0x0e, 0x63, 0xd2, 0xb0,
    0x09, 0xba, 0x5a, 0xbb, 0xcf, 0x9b, 0xe2, 0x9b,
    0x8b, 0x25, 0xe4, 0x6d, 0x5c, 0x9e, 0xdd, 0xf9
};
static const int sizeof_ecc_secret_256 = sizeof(ecc_secret_256);
#endif

#ifndef NO_DH
static byte dh_ffdhe2048_p[] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A,
    0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1,
    0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95,
    0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB,
    0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9,
    0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8,
    0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A,
    0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61,
    0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0,
    0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3,
    0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35,
    0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77,
    0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72,
    0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35,
    0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A,
    0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61,
    0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB,
    0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68,
    0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4,
    0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19,
    0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70,
    0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC,
    0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61,
    0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF,
    0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83,
    0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73,
    0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05,
    0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2,
    0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA,
    0x88, 0x6B, 0x42, 0x38, 0x61, 0x28, 0x5C, 0x97,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};
static byte dh_ffdhe2048_g[] = { 0x02 };

static byte dh_2048_priv[] = {
    0x0d, 0xc9, 0xf9, 0x5b, 0xde, 0xd0, 0x7d, 0x92,
    0x1e, 0x11, 0x1f, 0xee, 0xce, 0xae, 0xc6, 0x8d,
    0xbf, 0xcc, 0xd6, 0x5a, 0xe3, 0xa6, 0xe0, 0xb5,
    0xcc, 0x7d, 0x6a, 0x65, 0xa4
};

static byte dh_2048_pub[] = {
    0x9b, 0x0c, 0x59, 0xf1, 0x38, 0x2d, 0xa1, 0x56,
    0xbb, 0xd3, 0x75, 0x44, 0x43, 0xc6, 0xf1, 0x77,
    0x6d, 0xcf, 0xbf, 0x53, 0xbe, 0x3a, 0xfd, 0x4f,
    0x07, 0xfe, 0x49, 0x42, 0x94, 0xa8, 0xa1, 0x4e,
    0x1b, 0x56, 0xff, 0xbf, 0x45, 0xe6, 0x84, 0xf8,
    0x65, 0x89, 0xac, 0xd3, 0x40, 0x4c, 0xdf, 0x2f,
    0x3a, 0xd4, 0x06, 0xa5, 0xab, 0xcd, 0x23, 0x7f,
    0x9b, 0x38, 0x3b, 0x7d, 0xa2, 0xc0, 0x73, 0xd4,
    0x31, 0x55, 0xa5, 0xe9, 0x5d, 0x0a, 0x1a, 0x62,
    0x02, 0xcf, 0xd3, 0x26, 0xe8, 0xfc, 0x10, 0xde,
    0x98, 0x19, 0x49, 0xc2, 0x43, 0x7f, 0xee, 0xb2,
    0x26, 0x60, 0x33, 0xfd, 0xc2, 0x09, 0xd1, 0x74,
    0xee, 0x64, 0xae, 0x27, 0x10, 0x39, 0x0f, 0x14,
    0x63, 0x5e, 0x94, 0xc8, 0x5d, 0xf3, 0x20, 0x03,
    0x88, 0x4d, 0x4d, 0x32, 0xd2, 0x26, 0xcc, 0x77,
    0x72, 0x1e, 0xdc, 0xc7, 0x82, 0x06, 0x1d, 0x70,
    0xaa, 0x35, 0xc9, 0x9d, 0xcf, 0x6b, 0x9c, 0x4b,
    0xa5, 0x6d, 0xa4, 0x77, 0x03, 0xe8, 0x45, 0xff,
    0xb4, 0xe6, 0x20, 0xcd, 0x4c, 0x04, 0xfc, 0xb2,
    0x3d, 0xa8, 0xed, 0x69, 0xba, 0x3c, 0xa6, 0xe8,
    0x90, 0xc8, 0x93, 0xeb, 0xd0, 0x23, 0xc4, 0x5a,
    0xd8, 0xec, 0x5b, 0xe6, 0x2e, 0xa7, 0x2d, 0x42,
    0x62, 0xd4, 0x18, 0x3a, 0xb7, 0x14, 0x3e, 0x19,
    0xdf, 0xc3, 0xe8, 0x14, 0xd6, 0x58, 0x31, 0x79,
    0xb2, 0x71, 0x0c, 0x6e, 0x23, 0xcc, 0x65, 0xe8,
    0x25, 0x40, 0xaf, 0xd6, 0x07, 0x5d, 0x33, 0x17,
    0xf5, 0x10, 0xcc, 0xfe, 0xa8, 0xd2, 0xb9, 0x6f,
    0xbb, 0xb9, 0xc0, 0xd4, 0x3f, 0xae, 0x53, 0x47,
    0xba, 0x8e, 0xc1, 0xc0, 0xc8, 0x1d, 0xf7, 0xb8,
    0x7b, 0xae, 0x66, 0x1b, 0x0d, 0x83, 0xba, 0xd3,
    0x25, 0x47, 0xd7, 0xd5, 0x5f, 0xa5, 0xab, 0x13,
    0xca, 0x7c, 0xaf, 0x06, 0xa7, 0xfc, 0x8e, 0x24
};

static byte dh_2048_peer[] = {
    0x0d, 0x5e, 0x81, 0x9a, 0xc5, 0x3b, 0x43, 0x80,
    0x97, 0xb5, 0x8b, 0xc3, 0x86, 0x2e, 0x6a, 0x71,
    0x00, 0x96, 0xc1, 0x46, 0xb8, 0x2e, 0x8a, 0x9b,
    0xad, 0xf0, 0x3a, 0xe1, 0x91, 0x51, 0x02, 0x3c,
    0x7b, 0x3a, 0xc2, 0x15, 0x53, 0x6c, 0xbf, 0x28,
    0xb0, 0xd5, 0x52, 0xac, 0xdd, 0x74, 0xbd, 0xf6,
    0x36, 0xf6, 0x35, 0x5a, 0x31, 0x35, 0x1b, 0xb7,
    0xe0, 0x1b, 0x85, 0x4c, 0x3d, 0xa0, 0x72, 0x20,
    0x8c, 0x3f, 0x0d, 0xbe, 0xe7, 0x02, 0x0f, 0x19,
    0xa2, 0xaa, 0xb5, 0x98, 0xc4, 0x00, 0x5a, 0x7c,
    0x50, 0x93, 0x66, 0xa8, 0xe9, 0x85, 0x2b, 0xd9,
    0x4b, 0x57, 0xa0, 0x6f, 0xec, 0x5e, 0x56, 0x80,
    0xfa, 0x37, 0xa0, 0x3f, 0x14, 0x68, 0x43, 0x18,
    0x06, 0x9b, 0xbc, 0xf8, 0x1a, 0xd8, 0xbb, 0xfe,
    0x05, 0x1a, 0x03, 0x0e, 0x94, 0xa5, 0x90, 0xca,
    0x62, 0x52, 0x34, 0x23, 0x97, 0xec, 0x4c, 0xcc,
    0x8d, 0x82, 0xbb, 0xbb, 0xf0, 0x41, 0x4c, 0xff,
    0x97, 0x07, 0x0d, 0xcf, 0x26, 0x97, 0xbc, 0xfa,
    0x98, 0x38, 0xb5, 0x44, 0x38, 0xb5, 0x6a, 0x32,
    0x2d, 0x2d, 0xac, 0x64, 0x4b, 0xb7, 0x8f, 0x61,
    0x61, 0x4c, 0xa8, 0xf0, 0xc3, 0x35, 0xc6, 0xfe,
    0xd4, 0xa5, 0x9d, 0xf7, 0x18, 0x57, 0x8e, 0xfb,
    0xbb, 0x1f, 0x81, 0x43, 0x0b, 0x18, 0x70, 0xfb,
    0xb4, 0x01, 0x84, 0x33, 0x26, 0x94, 0xeb, 0xb5,
    0x9a, 0xea, 0x00, 0x31, 0x90, 0xd3, 0x49, 0x4c,
    0x9c, 0x82, 0xe4, 0xe2, 0xa1, 0xa4, 0x68, 0xc8,
    0x12, 0xcb, 0x5c, 0x8a, 0x9c, 0xe7, 0x69, 0xb2,
    0x1e, 0xb6, 0x21, 0xf8, 0x15, 0x42, 0x7b, 0xd2,
    0x2a, 0x88, 0xdd, 0xc0, 0x27, 0x34, 0xe3, 0xcd,
    0x0f, 0x9e, 0xd5, 0x91, 0x56, 0xf5, 0x9a, 0xd7,
    0x63, 0xd2, 0x21, 0xf6, 0x14, 0xe5, 0x8c, 0xb8,
    0xfd, 0xa4, 0x7e, 0x9c, 0x15, 0x03, 0xd5, 0xcc
};

static byte dh_2048_exp[] = {
    0x10, 0x0c, 0x55, 0x78, 0xe0, 0xa6, 0x50, 0xbf,
    0x04, 0xbd, 0x9e, 0xf1, 0x72, 0x28, 0xa3, 0xfa,
    0x6c, 0x6f, 0x63, 0x86, 0xda, 0x2f, 0x76, 0xa1,
    0xc2, 0xd3, 0x1c, 0xf2, 0x55, 0x27, 0xf0, 0xc2,
    0x50, 0xbb, 0xde, 0x42, 0x0c, 0x35, 0x05, 0xa1,
    0xbc, 0x0d, 0x73, 0x4d, 0x3d, 0x29, 0x53, 0x10,
    0xd3, 0x0e, 0x08, 0xe4, 0xe1, 0xf2, 0x2b, 0x97,
    0x1c, 0x4d, 0x8a, 0xb5, 0x15, 0xc0, 0x99, 0x38,
    0x91, 0x3e, 0x7e, 0x42, 0x72, 0x24, 0x6a, 0xa4,
    0x31, 0xfd, 0x26, 0x8f, 0x2a, 0xe3, 0x4b, 0x14,
    0x95, 0x40, 0x18, 0x60, 0xb5, 0x71, 0x43, 0xe2,
    0xd0, 0xf2, 0x37, 0x1b, 0x65, 0xca, 0xfc, 0xcb,
    0xdb, 0xf2, 0xb8, 0xee, 0x36, 0xb6, 0x29, 0x1d,
    0xf7, 0x88, 0x9e, 0x9a, 0x5f, 0xe2, 0xaa, 0xca,
    0xba, 0x14, 0x8a, 0xd3, 0xd1, 0x2d, 0x39, 0xe0,
    0x60, 0x6c, 0xc3, 0xab, 0x35, 0x28, 0x59, 0xfb,
    0x5e, 0x47, 0x17, 0x65, 0x53, 0x6d, 0xcf, 0xc8,
    0xd8, 0x71, 0xd6, 0xd8, 0x3c, 0x27, 0x85, 0xd0,
    0x4a, 0xe4, 0xfa, 0x18, 0x16, 0x70, 0xa9, 0xb0,
    0xe6, 0x06, 0xe0, 0xc2, 0xdc, 0xac, 0x6b, 0x92,
    0xcb, 0x9d, 0xe6, 0x98, 0x9d, 0x94, 0xcc, 0x59,
    0xe3, 0x80, 0xad, 0x37, 0x36, 0xf2, 0x15, 0x86,
    0xff, 0xf7, 0xf2, 0x93, 0x95, 0xcc, 0x96, 0x97,
    0xca, 0x2c, 0x6e, 0x5c, 0xa3, 0xa8, 0xf4, 0x09,
    0xa7, 0x30, 0x7c, 0xc9, 0x45, 0xcd, 0xae, 0x44,
    0x4f, 0xe1, 0x49, 0xf2, 0xbc, 0x87, 0x4a, 0x6c,
    0x50, 0x69, 0xc7, 0x67, 0xec, 0x47, 0x7c, 0xab,
    0xbe, 0x1e, 0x71, 0x8f, 0xba, 0xf3, 0x79, 0x13,
    0xcb, 0xb0, 0xce, 0x73, 0x27, 0x55, 0xf6, 0x40,
    0x26, 0x54, 0xa4, 0x8f, 0x21, 0x42, 0xcb, 0x4f,
    0x54, 0x21, 0xd8, 0x9e, 0x3f, 0xe8, 0xff, 0x51,
    0xa9, 0xee, 0xe9, 0x4f, 0xb8, 0xe0, 0x65, 0x2c
};
static const int sizeof_dh_2048_exp = sizeof(dh_2048_exp);
#endif

#ifndef NO_AES
static unsigned char aes_128_key[] = {
    0xf7, 0x88, 0x9e, 0x9a, 0x5f, 0xe2, 0xaa, 0xca,
    0xba, 0x14, 0x8a, 0xd3, 0xd1, 0x2d, 0x39, 0xe0,
};

#ifndef NO_AES_CBC
static unsigned char aes_128_cbc_encrypt_exp[] = {
    0x00, 0x1b, 0x7d, 0x66, 0x5c, 0xdc, 0xbb, 0x82,
    0x19, 0x0c, 0xe4, 0x59, 0xfa, 0x05, 0x4e, 0x1f
};
static unsigned char aes_128_cbc_exp[] = {
    0x00, 0x1b, 0x7d, 0x66, 0x5c, 0xdc, 0xbb, 0x82,
    0x19, 0x0c, 0xe4, 0x59, 0xfa, 0x05, 0x4e, 0x1f,
    0xe3, 0xca, 0x03, 0xb5, 0x0a, 0x0f, 0x33, 0x84,
    0xc6, 0x4a, 0xb7, 0x12, 0xd0, 0xb0, 0x32, 0x76
};
static unsigned char aes_128_cbc_pad_exp[] = {
    0x00, 0x1b, 0x7d, 0x66, 0x5c, 0xdc, 0xbb, 0x82,
    0x19, 0x0c, 0xe4, 0x59, 0xfa, 0x05, 0x4e, 0x1f,
    0xe3, 0xca, 0x03, 0xb5, 0x0a, 0x0f, 0x33, 0x84,
    0xc6, 0x4a, 0xb7, 0x12, 0xd0, 0xb0, 0x32, 0x76,
    0x37, 0x7e, 0x93, 0x5b, 0x2a, 0x3e, 0x6e, 0xec,
    0x20, 0x1a, 0x10, 0xbb, 0x3f, 0x0d, 0xde, 0x28
};
#endif

#ifdef HAVE_AESGCM
static unsigned char aes_128_gcm_exp[] = {
    0xcb, 0x33, 0x8f, 0x1f, 0x90, 0x8f, 0x20, 0x8d,
    0x65, 0x1c, 0x1c, 0x78, 0x45, 0x78, 0xb3, 0xf3,
    0x96, 0xe5, 0x8a, 0xdf, 0xbf, 0x58, 0x58, 0x7f,
    0x6a, 0x66, 0x91, 0x64, 0xd9, 0xfe, 0x1a, 0x20,
};

static unsigned char aes_128_gcm_exp_tag[] = {
    0xef, 0xfe, 0x32, 0x1c, 0x29, 0x6b, 0x59, 0x5b,
    0xeb, 0xcf, 0x25, 0x05, 0x12, 0x54, 0x6e, 0x1c
};
#endif

#ifdef HAVE_AESCTS
static unsigned char aes_128_cts_exp[] = {
    0xe3, 0xca, 0x03, 0xb5, 0x0a, 0x0f, 0x33, 0x84,
    0xc6, 0x4a, 0xb7, 0x12, 0xd0, 0xb0, 0x32, 0x76,
    0x00, 0x1b, 0x7d, 0x66, 0x5c, 0xdc, 0xbb, 0x82,
    0x19, 0x0c, 0xe4, 0x59, 0xfa, 0x05, 0x4e, 0x1f
};
#endif
#endif


#ifndef WOLFPKCS11_NO_ENV
#include <stdio.h>
#include <stdlib.h> /* setenv/getenv */
#include <string.h>

#if defined(__MINGW32__) || defined(_MSC_VER)
/* Windows/MinGw does not support setenv, but does have putenv and getenv */
extern int _putenv(const char *);
static inline int setenv(const char *name, const char *value, int overwrite)
{
    char env[255];
    size_t len = strlen(name) + 1 + strlen(value) + 1;
    if (len < sizeof(env)) {
        sprintf(env, "%s=%s", name, value);
        return _putenv(env);
    }
    (void)overwrite;
    return EXIT_FAILURE;
}
#endif
#endif /* !WOLFPKCS11_NO_ENV */
